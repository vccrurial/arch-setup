#+TITLE: Shitty emacs config
#+AUTHOR: Chmono Vicious

* Basic stuff
#+begin_src emacs-lisp
  ;;(load-theme 'modus-operandi t)
  (scroll-bar-mode 1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers 'relative)
  (global-visual-line-mode t)
  (setq x-select-enable-clipboard t)
  (electric-indent-mode -1)
  (require 'org-tempo)
  (setq display-line-numbers 'relative)
  (electric-indent-mode -1)
#+end_src

* Setup package manager
#+begin_src emacs-lisp
      (defvar elpaca-installer-version 0.4)
      (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
      (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
      (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
      (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				    :ref nil
				    :files (:defaults (:exclude "extensions"))
				    :build (:not elpaca--activate-package)))
      (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	     (build (expand-file-name "elpaca/" elpaca-builds-directory))
	     (order (cdr elpaca-order))
	     (default-directory repo))
	(add-to-list 'load-path (if (file-exists-p build) build repo))
	(unless (file-exists-p repo)
	  (make-directory repo t)
	  (when (< emacs-major-version 28) (require 'subr-x))
	  (condition-case-unless-debug err
	      (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		       ((zerop (call-process "git" nil buffer t "clone"
					     (plist-get order :repo) repo)))
		       ((zerop (call-process "git" nil buffer t "checkout"
					     (or (plist-get order :ref) "--"))))
		       (emacs (concat invocation-directory invocation-name))
		       ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					     "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		       ((require 'elpaca))
		       ((elpaca-generate-autoloads "elpaca" repo)))
		  (kill-buffer buffer)
		(error "%s" (with-current-buffer buffer (buffer-string))))
	    ((error) (warn "%s" err) (delete-directory repo 'recursive))))
	(unless (require 'elpaca-autoloads nil t)
	  (require 'elpaca)
	  (elpaca-generate-autoloads "elpaca" repo)
	  (load "./elpaca-autoloads")))
      (add-hook 'after-init-hook #'elpaca-process-queues)
      (elpaca `(,@elpaca-order))

      ;; Install use-package support
    (elpaca elpaca-use-package
      ;; Enable :elpaca use-package keyword.
      (elpaca-use-package-mode)
      ;; Assume :elpaca t unless otherwise specified.
      (setq elpaca-use-package-by-default t))

    ;; Block until current queue processed.
    (elpaca-wait)

    ;;When installing a package which modifies a form used at the top-level
    ;;(e.g. a package which adds a use-package key word),
    ;;use `elpaca-wait' to block until that package has been installed/configured.
    ;;For example:
    ;;(use-package general :demand t)
    ;;(elpaca-wait)

    ;;Useful for configuring built-in emacs features.
    (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

    ;; Don't install anything. Defer execution of BODY
    (elpaca nil (message "deferred"))
#+end_src

* Setup evil mode
#+begin_src emacs-lisp
  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
      :init      ;; tweak evil's configuration before loading it
      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-mode))
    (use-package evil-collection
      :after evil
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init))
    (use-package evil-tutor)
#+end_src

* General keybindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup))
#+end_src

* Org mode
** Enabling table of contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling org bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* Reload emacs
#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* Which key
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " â†’ " ))
#+end_src

* Random plugins
#+begin_src emacs-lisp
(use-package acme-theme
  :config
  (load-theme 'acme t))
(setq acme-theme-black-fg t)
#+end_src

* All the icon
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Ivy
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))
#+end_src

* Vterm
#+begin_src emacs-lisp
(use-package vterm)
#+end_src
